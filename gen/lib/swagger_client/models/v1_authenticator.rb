=begin
#API Reference

#Review our [API Introduction](../api-introduction) to get started.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.53
=end

require 'date'

module SwaggerClient
  class V1Authenticator
    # Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).
    attr_accessor :transports

    attr_accessor :attestation_type

    # Identifier indicating the type of the Security Key.
    attr_accessor :aaguid

    # Unique identifier for a WebAuthn credential.
    attr_accessor :credential_id

    # The type of Authenticator device.
    attr_accessor :model

    attr_accessor :credential

    # Unique identifier for a given Authenticator.
    attr_accessor :authenticator_id

    # Human-readable name for an Authenticator.
    attr_accessor :authenticator_name

    attr_accessor :created_at

    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transports' => :'transports',
        :'attestation_type' => :'attestationType',
        :'aaguid' => :'aaguid',
        :'credential_id' => :'credentialId',
        :'model' => :'model',
        :'credential' => :'credential',
        :'authenticator_id' => :'authenticatorId',
        :'authenticator_name' => :'authenticatorName',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transports' => :'Object',
        :'attestation_type' => :'Object',
        :'aaguid' => :'Object',
        :'credential_id' => :'Object',
        :'model' => :'Object',
        :'credential' => :'Object',
        :'authenticator_id' => :'Object',
        :'authenticator_name' => :'Object',
        :'created_at' => :'Object',
        :'updated_at' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::V1Authenticator` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::V1Authenticator`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transports')
        if (value = attributes[:'transports']).is_a?(Array)
          self.transports = value
        end
      end

      if attributes.key?(:'attestation_type')
        self.attestation_type = attributes[:'attestation_type']
      end

      if attributes.key?(:'aaguid')
        self.aaguid = attributes[:'aaguid']
      end

      if attributes.key?(:'credential_id')
        self.credential_id = attributes[:'credential_id']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'credential')
        self.credential = attributes[:'credential']
      end

      if attributes.key?(:'authenticator_id')
        self.authenticator_id = attributes[:'authenticator_id']
      end

      if attributes.key?(:'authenticator_name')
        self.authenticator_name = attributes[:'authenticator_name']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @transports.nil?
        invalid_properties.push('invalid value for "transports", transports cannot be nil.')
      end

      if @attestation_type.nil?
        invalid_properties.push('invalid value for "attestation_type", attestation_type cannot be nil.')
      end

      if @aaguid.nil?
        invalid_properties.push('invalid value for "aaguid", aaguid cannot be nil.')
      end

      if @credential_id.nil?
        invalid_properties.push('invalid value for "credential_id", credential_id cannot be nil.')
      end

      if @model.nil?
        invalid_properties.push('invalid value for "model", model cannot be nil.')
      end

      if @credential.nil?
        invalid_properties.push('invalid value for "credential", credential cannot be nil.')
      end

      if @authenticator_id.nil?
        invalid_properties.push('invalid value for "authenticator_id", authenticator_id cannot be nil.')
      end

      if @authenticator_name.nil?
        invalid_properties.push('invalid value for "authenticator_name", authenticator_name cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @transports.nil?
      return false if @attestation_type.nil?
      return false if @aaguid.nil?
      return false if @credential_id.nil?
      return false if @model.nil?
      return false if @credential.nil?
      return false if @authenticator_id.nil?
      return false if @authenticator_name.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transports == o.transports &&
          attestation_type == o.attestation_type &&
          aaguid == o.aaguid &&
          credential_id == o.credential_id &&
          model == o.model &&
          credential == o.credential &&
          authenticator_id == o.authenticator_id &&
          authenticator_name == o.authenticator_name &&
          created_at == o.created_at &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transports, attestation_type, aaguid, credential_id, model, credential, authenticator_id, authenticator_name, created_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
